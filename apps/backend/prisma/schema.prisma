generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                @id @default(uuid())
  email             String                @unique
  displayName       String?
  avatarUrl         String?
  timeZone          String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  emailVerified     Boolean               @default(false)
  password          String?
  calendars         Calendar[]
  connectedAccounts ConnectedAccount[]
  events            Event[]
  calendarSettings  UserCalendarSetting[]

  @@map("users")
}

model ConnectedAccount {
  id                    String     @id @default(uuid())
  userId                String
  provider              String
  providerAccountId     String
  encryptedAccessToken  String
  encryptedRefreshToken String?
  tokenExpiresAt        DateTime?
  scope                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  calendars             Calendar[]
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("connected_accounts")
}

model Calendar {
  id                 String                @id @default(uuid())
  externalId         String
  name               String
  description        String?
  color              String?
  timeZone           String?
  isDefault          Boolean?
  isVisible          Boolean?
  connectedAccountId String?
  userId             String
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  connectedAccount   ConnectedAccount?     @relation(fields: [connectedAccountId], references: [id], onDelete: Cascade)
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  events             Event[]
  settings           UserCalendarSetting[]

  @@unique([externalId, connectedAccountId])
  @@map("calendars")
}

model Event {
  id             String    @id @default(uuid())
  externalId     String?
  title          String
  description    String?
  startTime      DateTime
  endTime        DateTime
  isAllDay       Boolean?
  location       String?
  url            String?
  status         String?
  visibility     String?
  recurrenceRule String?
  recurrenceId   String?
  lastSyncedAt   DateTime?
  syncStatus     String?
  calendarId     String
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  calendar       Calendar  @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events")
}

model UserCalendarSetting {
  id                   String   @id @default(uuid())
  userId               String
  calendarId           String
  syncEnabled          Boolean?
  conflictResolution   String?
  notificationsEnabled Boolean?
  defaultEventDuration Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  calendar             Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, calendarId])
  @@map("user_calendar_settings")
}
